#################################################################################
#  Copyright (c) 2024 Bayerische Motoren Werke Aktiengesellschaft (BMW AG)
#  Copyright (c) 2021,2023 Contributors to the Eclipse Foundation
#  Copyright (c) 2025 SAP SE
#  Copyright (c) 2025 Fraunhofer Institute of Optronics, System Technologies
#  and Image Exploitation (Fraunhofer IOSB)
#
#  See the NOTICE file(s) distributed with this work for additional
#  information regarding copyright ownership.
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0.
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#################################################################################


---
name: "Draft Release"
run-name: "Draft Release ${{ inputs.version }} from ${{ github.ref_name }}"

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version you want to release. Ref should be either main for latest releases or a tag for bugfixes.'
        required: true

env:
  REGISTRY: ghcr.io
  ORG: ${{ github.repository_owner }}
  IMAGE: ${{ github.event.repository.name }}

jobs:
  validate-and-prepare:
    name: "Validate that tag does not already exist and prepare branch"
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/') }}
    outputs:
      branch_name: ${{ steps.resolve_branch.outputs.branch_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: check-tag
        name: "Check if tag exists"
        run: |-

          tag=$(git tag -l ${{ inputs.version }})

          if [ ! -z $tag ];
          then
            echo "Tag already exists! Please choose another tag."
            exit 1
          fi
      - id: resolve_branch
        name: "Resolve branch prefix (release or bugfix)"
        run: |
          
          if [[ ${{ github.ref_name }} == "main" ]];
          then
            echo "branch_name=release/${{ inputs.version }}" >> "$GITHUB_OUTPUT"
          elif [[ ${{ github.ref }} == refs/tags/* ]]
          then
            echo "branch_name=bugfix/${{ inputs.version }}" >> "$GITHUB_OUTPUT"
          else
            echo "Ref branch does not match required criteria. Should either be "main" or a tag."
            exit 1
          fi

  draft-new-release:
    name: "Draft a new release"
    runs-on: ubuntu-latest
    needs: validate-and-prepare
    permissions:
      contents: write
      packages: write
      pages: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Create Release or Bugfix branch
        run: git checkout -b ${{ needs.validate-and-prepare.outputs.branch_name }}
      - name: Initialize mandatory git config
        run: |
          git config user.name "factory-x-bot"
          git config user.email "factory-x-bot@factory-x.org"
      - name: Check dependencies before release
        uses: ./.github/actions/generate-and-check-dependencies
        if: false # TODO
        with:
          run: standard

      - name: Cache maven repository
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ~/.sonar/cache
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven
      - name: Set up JDK and Caching
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'
          cache-dependency-path: 'pom.xml'

      - name: Build with Maven
        id: mvn-build
        run: | # TODO remove -DskipTests
          mvn -B -ntp clean install -DskipTests
          echo "artifact_file=$(mvn -pl starter -Dexec.executable='echo' -Dexec.args='${project.build.finalName}' exec:exec -q).jar" >> "$GITHUB_ENV"
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        working-directory: starter
        env:
          IMAGE_NAME: ${{ env.IMAGE }}
          IMAGE_TAG: ${{ inputs.version }}
        run: |
          docker build \
            --build-arg ARTIFACT_FILE="$artifact_file" \
            -t "${IMAGE_NAME}:${IMAGE_TAG}" .

      - name: Tag image for docker registry
        run: docker tag "${IMAGE_NAME}:${IMAGE_TAG}" "${REGISTRY}/${ORG}/${IMAGE_NAME}:${IMAGE_TAG}"
        env:
          REGISTRY: ${{ env.REGISTRY }}
          ORG: ${{ env.ORG }}
          IMAGE_NAME: ${{ env.IMAGE }}
          IMAGE_TAG: ${{ inputs.version }}

      - name: Push image
        run: docker push "${REGISTRY}/${ORG}/${IMAGE_NAME}:${IMAGE_TAG}"
        env:
          REGISTRY: ${{ env.REGISTRY }}
          ORG: ${{ env.ORG }}
          IMAGE_NAME: ${{ env.IMAGE }}
          IMAGE_TAG: ${{ inputs.version }}

      #- name: Replace published DEPENDENCIES file link in NOTICE with the one just created
      #  run: sed -i "s#\[DEPENDENCIES\]\(.*\)#\[DEPENDENCIES\]\(DEPENDENCIES\)#g" NOTICE.md
      - name: Get current version for doc-version-bump
        id: get-current-version
        run: |-
          echo "current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> "$GITHUB_ENV"
      - name: Bump version in _all_ pom.xml
        run: |- # TODO do we want this? this would update every pom's version.
          mvn -B -ntp versions:set -DnewVersion='${{ inputs.version }}' -DgenerateBackupPoms=false -DprocessAllModules=true
      - name: Bump version in docs
        run: |-
          source release.sh

      - name: Commit manifest files
        id: make-commit
        run: |
          git add .
          git commit --message "Prepare release ${{ inputs.version }}"

          echo "commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      - name: Push new branch
        run: git push origin ${{ needs.validate-and-prepare.outputs.branch_name }}
      - name: Create pull request
        if: ${{ github.ref_name == 'main' }}
        uses: thomaseizinger/create-pull-request@1.4.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          head: ${{ needs.validate-and-prepare.outputs.branch_name }}
          base: main
          title: Release version ${{ inputs.version }}
          reviewers: ${{ github.actor }}
          body: |-
            This PR was created in response to a manual trigger of the [draft release workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).
            Versions have been bumped in [commit ${{ steps.make-commit.outputs.commit }}](${{ steps.make-commit.outputs.commit }}).

            Merging this PR will create a GitHub release and upload any assets that are created as part of the release build.